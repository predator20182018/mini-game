from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from .states import GameState  # –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç
from aiogram.types import WebAppData

from . import commands
from .states import Status, Connection
from .keyboards import get_start_keyboard, get_main_keyboard
from .utils import is_admin
from .commands import get_partner_id, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_partner_id

router = Router()

@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await commands.start(message, state)


@router.message(Command("stop_polling"))
async def command_stop_polling_handler(message: Message) -> None:
    if is_admin(message.from_user.id):
        await commands.stop_polling(message)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command("stop"))
async def command_stop_handler(message: Message) -> None:
    await commands.stop(message)


@router.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    await commands.help_command(message)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---

@router.message(F.text == "–ü–æ—á–µ–º—É —è —Ç–µ–±—è –ª—é–±–ª—é?")
async def why_love_reply_handler(message: Message) -> None:
    await commands.why_love(message)


@router.message(F.text == "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç—å")
async def pleasantness_reply_handler(message: Message) -> None:
    await commands.pleasantness(message)


@router.message(F.text == "üíã")
async def kiss_reply_handler(message: Message) -> None:
    await commands.kiss(message)


@router.message(F.text == "–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def status_button_handler(message: Message) -> None:
    await commands.status(message)


@router.callback_query(F.data == "show_my_status")
async def show_my_status_handler(callback_query: CallbackQuery) -> None:
    await commands.show_my_status(callback_query)


@router.callback_query(F.data == "show_partner_status")
async def show_partner_status_handler(callback_query: CallbackQuery) -> None:
    await commands.show_partner_status(callback_query)


@router.callback_query(F.data == "change_my_status")
async def change_my_status_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    await commands.change_my_status(callback_query, state)


@router.message(Status.waiting_for_status)
async def set_status(message: Message, state: FSMContext) -> None:
    await commands.set_status(message, state)


@router.message(F.text == "üíû –°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º üíû")
async def connect_partner_handler(message: Message, state: FSMContext) -> None:
    await commands.connect_partner(message, state)


@router.message(Connection.waiting_for_partner_id)
async def process_partner_id(message: Message, state: FSMContext) -> None:
    await commands.process_partner_id(message, state)


@router.callback_query(F.data.startswith("confirm:"))
async def confirm_connection(callback_query: CallbackQuery, state: FSMContext) -> None:
    await commands.confirm_connection(callback_query, state)


@router.callback_query(F.data.startswith("reject:"))
async def reject_connection(callback_query: CallbackQuery, state: FSMContext) -> None:
    await commands.reject_connection(callback_query, state)


@router.message(Command("quit"))
async def quit_command_handler(message: Message, state: FSMContext) -> None:
    await commands.quit_connection(message, state)


@router.message(F.content_type.in_(["pinned_message"]))
async def pinned_message_handler(message: Message) -> None:
    await commands.pinned_message(message)


@router.message(F.text == "–ú–∏–Ω–∏-–∏–≥—Ä–∞ üéÆ")  # –î–æ–±–∞–≤–∏–ª–∏
async def start_mini_game(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–∏–Ω–∏-–∏–≥—Ä–∞ üéÆ'."""
    user_id = message.from_user.id
    partner_id = get_partner_id(user_id)

    if partner_id is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        return

    #  –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await state.set_state(GameState.playing)
    await message.answer(
        "–ú–∏–Ω–∏-–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–∞—Å–∞–π—Ç–µ—Å—å —ç–∫—Ä–∞–Ω–∞, –∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ –∫–∞—Å–∞–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ /quit_game."
    )


@router.message(GameState.playing)  # –î–æ–±–∞–≤–∏–ª–∏
async def handle_touches(message: Message, state: FSMContext):
    user_id = message.from_user.id
    partner_id = get_partner_id(user_id)

    if partner_id is None:
        await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.")
        await state.clear()
        return
    #  –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "x:100 y:200")
    touch_data = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    await bot.send_message(partner_id, f"–ö–∞—Å–∞–Ω–∏–µ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {touch_data}")


@router.message(Command("quit_game"))  # –î–æ–±–∞–≤–∏–ª–∏
async def quit_game(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quit_game –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∏–Ω–∏-–∏–≥—Ä—ã."""
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
    if current_state == GameState.playing:
        await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∏–Ω–∏-–∏–≥—Ä—ã.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    else:
        await message.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞–∂–∞–≤ '–ú–∏–Ω–∏-–∏–≥—Ä–∞ üéÆ'.")


@router.message()
async def handle_all_other_messages(message: Message) -> None:
    await commands.other_messages(message)


@router.message(F.web_app_data)  # –î–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Web App Data
async def handle_web_app_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    user_id = message.from_user.id
    partner_id = get_partner_id(user_id)

    if partner_id is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    data = message.web_app_data.data
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    await bot.send_message(partner_id, f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {data}")