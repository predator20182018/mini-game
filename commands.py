import asyncio
import datetime
import random
import sys
import os

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound

from .states import Status, Connection
from .keyboards import create_confirmation_keyboard, get_start_keyboard, get_main_keyboard
from .config import start_date, moscow_tz, TOKEN, get_admin_id
from .utils import is_admin

bot = Bot(token=TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}        # {chat_id: username}
user_message_ids = {}  # {chat_id: message_id}
user_statuses = {}     # {chat_id: status}
connections = {}       # {user_id1: user_id2, user_id2: user_id1}
pending_requests = {}  # {user_id: requester_id}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
running = True
polling_stopped = False

async def send_days_together_message(user_id: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç/–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–î–Ω–µ–π –≤–º–µ—Å—Ç–µ'."""
    partner_id = get_partner_id(user_id)
    if partner_id is None:
        return

    today = datetime.datetime.now(moscow_tz).date()
    days_diff = (today - start_date).days
    message_text = f"üíñ –ú—ã –≤–º–µ—Å—Ç–µ —É–∂–µ {days_diff} –¥–Ω–µ–π! üíñ"

    message_id = user_message_ids.get(user_id)

    try:
        if message_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=message_text
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            sent_message = await bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            user_message_ids[user_id] = sent_message.message_id
            await bot.pin_chat_message(
                chat_id=user_id,
                message_id=sent_message.message_id,
                disable_notification=True
            )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if "message to edit not found" in str(e).lower():
            sent_message = await bot.send_message(user_id, message_text)
            user_message_ids[user_id] = sent_message.message_id
            await bot.pin_chat_message(user_id, sent_message.message_id)
        else:
            print(f"–û—à–∏–±–∫–∞ –≤ send_days_together_message –¥–ª—è {user_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_days_together_message –¥–ª—è {user_id}: {e}")


async def start(message: Message, state: FSMContext):
    """–õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = message.chat.id
    username = message.from_user.username

    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:
    if get_partner_id(chat_id) is not None:
        reply_markup = get_main_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
        await message.answer("–í—ã —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        await send_days_together_message(chat_id)
    else:
        reply_markup = get_start_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö (—Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )

    if username:
        user_data[chat_id] = username
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id {chat_id} –¥–ª—è @{username} (/start)")
    else:
        print(f"–ù–µ—Ç username —É {message.from_user.first_name}, chat_id={chat_id}")

async def stop_polling(message: Message):
    """–õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    global running, polling_stopped
    running = False
    polling_stopped = True
    await bot.close()
    await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–µ—Ä–µ—Å—Ç–∞–ª –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è).")
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /stop_polling")

async def stop(message: Message):
    """–õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global running, polling_stopped
    admin_id = get_admin_id()

    if admin_id is None:
        await message.answer("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if message.from_user.id == admin_id:
        running = False
        polling_stopped = True
        await bot.close()
        await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")

async def help_command(message: Message):
    help_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)\n"
        "/stop_polling - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/quit_game - –í—ã–π—Ç–∏ –∏–∑ –º–∏–Ω–∏-–∏–≥—Ä—ã\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã –ª—é–±–≤–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ü–µ–ª—É–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
        "üíû –°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º üíû - –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è"
    )
    await message.answer(help_text)

async def why_love(message: Message):
    user_id = message.from_user.id
    if get_partner_id(user_id) is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_dir, "–ø—Ä–∏—á–∏–Ω—ã.txt")
        with open(file_path, "r", encoding="utf-8") as f:
            reasons = f.readlines()
        reason = random.choice(reasons).strip()
        await message.answer(reason)
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª '–ü—Ä–∏—á–∏–Ω—ã.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def pleasantness(message: Message):
    user_id = message.from_user.id
    if get_partner_id(user_id) is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        return
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_dir, "–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å.txt")
        with open(file_path, "r", encoding="utf-8") as f:
            pleasantnesses = f.readlines()
        pleasantness_text = random.choice(pleasantnesses).strip()
        await message.answer(pleasantness_text)
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª '–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç—å.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def kiss(message: Message):
    user_id = message.from_user.id
    partner_id = get_partner_id(user_id)

    if partner_id:
        partner_username = user_data.get(partner_id)
        sender_username = user_data.get(user_id)
        if partner_username and sender_username:
            await bot.send_message(partner_id, f"üíã –í–∞–º –ø–æ—Ü–µ–ª—É–π –æ—Ç @{sender_username}!")
            await message.answer("–ü–æ—Ü–µ–ª—É–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üíã")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("–í—ã –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üíû –°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.")

async def status(message: Message):
    keyboard = [
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="show_my_status")],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data="show_partner_status")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="change_my_status")],
    ]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def show_my_status(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    status = user_statuses.get(user_id, "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await callback_query.answer(text=f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}", show_alert=True)

async def show_partner_status(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    partner_id = get_partner_id(user_id)
    if partner_id:
        partner_status = user_statuses.get(partner_id, "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await callback_query.answer(text=f"–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_status}", show_alert=True)
    else:
        await callback_query.answer(text="–í—ã –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.", show_alert=True)

async def change_my_status(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    await state.set_state(Status.waiting_for_status)
    await callback_query.answer()

async def set_status(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_statuses[user_id] = message.text
    await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {message.text}")
    await state.clear()

    if get_partner_id(user_id) is not None:  # –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await send_days_together_message(user_id)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        reply_markup = get_main_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:  # –ï—Å–ª–∏ –Ω–µ —Å–æ–µ–¥–∏–Ω—ë–Ω
        reply_markup = get_start_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def connect_partner(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—á–∏—Å–ª–æ):")
    await state.set_state(Connection.waiting_for_partner_id)

async def process_partner_id(message: Message, state: FSMContext) -> None:
    try:
        partner_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user_id = message.from_user.id

    if user_id == partner_id:
        await message.answer("–ù–µ–ª—å–∑—è —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        return

    if get_partner_id(user_id) is not None:
        await message.answer("–í—ã —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.")
        return

    if partner_id not in user_data:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    pending_requests[partner_id] = user_id
    await state.set_state(Connection.waiting_for_confirmation)

    keyboard = create_confirmation_keyboard(user_id)
    try:
        await bot.send_message(
            partner_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} (ID: {user_id}) —Ö–æ—á–µ—Ç —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –≤–∞–º–∏.",
            reply_markup=keyboard,
        )
        await message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {partner_id}.")
    except TelegramBadRequest:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {partner_id}.")
        await state.clear()
        if partner_id in pending_requests:
            del pending_requests[partner_id]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_partner_id: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        await state.clear()
        if partner_id in pending_requests:
            del pending_requests[partner_id]

async def confirm_connection(callback_query: CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    partner_id = int(callback_query.data.split(":")[1])

    if get_partner_id(user_id) is not None:
        await callback_query.answer("–í—ã —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.", show_alert=True)
        return

    try:
        if pending_requests.get(user_id) != partner_id:
            raise KeyError("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –≤ –∑–∞–ø—Ä–æ—Å–µ.")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connections[user_id] = partner_id
        connections[partner_id] = user_id

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ pending_requests
        del pending_requests[user_id]

        await callback_query.answer("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
        await bot.send_message(user_id, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await bot.send_message(partner_id, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫—É "–°–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"
        main_keyboard = get_main_keyboard()
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        await bot.send_message(partner_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω—è—Ö –≤–º–µ—Å—Ç–µ
        await send_days_together_message(user_id)
        await send_days_together_message(partner_id)

    except KeyError as e:
        print(f"KeyError in confirm_connection: {e}")
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
    except Exception as e:
        print(f"confirm_connection error: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

async def reject_connection(callback_query: CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    partner_id = int(callback_query.data.split(":")[1])
    requester = pending_requests.get(user_id)

    await callback_query.answer("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.", show_alert=True)
    await bot.send_message(user_id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")

    if user_id in pending_requests:
        del pending_requests[user_id]

    try:
        await bot.send_message(partner_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    except TelegramBadRequest:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {partner_id} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    await state.clear()

async def quit_connection(message: Message, state: FSMContext) -> None:
    """–†–∞–∑—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    user_id = message.from_user.id
    partner_id = get_partner_id(user_id)

    if partner_id is None:
        await message.answer("–í—ã –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ connections
    del connections[user_id]
    del connections[partner_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer("–í—ã —Ä–∞–∑–æ—Ä–≤–∞–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.")
    await bot.send_message(partner_id, "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_keyboard())
    await bot.send_message(partner_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_keyboard())

async def pinned_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def other_messages(message: Message):
    await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect")

def get_partner_id(user_id: int) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return connections.get(user_id)

async def days_together_job():
    print("**–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è days_together_job**")
    for user_id in user_data:
        try:
            if get_partner_id(user_id) is not None:
                await send_days_together_message(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ days_together_job –¥–ª—è chat_id {user_id}: {e}")

async def schedule_daily_job():
    global bot, running
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏."""
    while running:
        now = datetime.datetime.now(moscow_tz)
        target_time = datetime.time(hour=12, minute=0, tzinfo=moscow_tz)
        target_datetime = datetime.datetime.combine(now.date(), target_time)

        if now.replace(tzinfo=moscow_tz) > target_datetime:
            target_datetime += datetime.timedelta(days=1)

        interval = (target_datetime - now).total_seconds()
        await asyncio.sleep(interval)
        if running:
            await days_together_job()
